import random

def generate_question(operation, value, used_questions, question_limits):
    """Genererar en unik matematisk fr√•ga baserat p√• valt r√§knes√§tt."""
    attempts = 0
    while True:
        factor_or_dividend = random.randint(0, 12)
        question = (factor_or_dividend, value)

        max_occurrences = question_limits[0] if len(used_questions) < 14 else \
                          question_limits[1] if len(used_questions) < 27 else \
                          question_limits[2]

        if used_questions.get(question, 0) < max_occurrences:
            used_questions[question] = used_questions.get(question, 0) + 1
            
            if operation == "multiplikation":
                return factor_or_dividend, factor_or_dividend * value
            elif operation == "division":
                return factor_or_dividend, factor_or_dividend / value
            elif operation == "modulo":
                return factor_or_dividend, factor_or_dividend % value

        attempts += 1
        if attempts > 100:
            raise ValueError("Misslyckades med att generera en unik fr√•ga.")

def choose_door(zombie_door, chosen_door):
    """Kontrollerar om anv√§ndaren valde en s√§ker d√∂rr."""
    return chosen_door != zombie_door

def setup_zombie_door(doors):
    """Slumpm√§ssigt v√§ljer en d√∂rr d√§r zombiesarna g√∂mmer sig."""
    return random.randint(1, doors)

def input_valid_int(prompt_text, min_value, max_value=None):
    """Validerar heltalsinmatning och s√§kerst√§ller att det alltid √§r ett giltigt heltal."""
    while True:
        try:
            user_answer = int(input(prompt_text))
            if max_value is None or min_value <= user_answer <= max_value:
                return user_answer
            print(f"Felaktigt nummer! Ange ett heltal mellan {min_value} och {max_value}.")
        except ValueError:
            print("Felaktig inmatning! Ange ett giltigt heltal.")

def input_valid_str(prompt_text, valid_answers):
    """Validerar str√§nginmatning och s√§kerst√§ller att anv√§ndaren v√§ljer ett giltigt alternativ."""
    while True:
        user_answer = input(prompt_text).strip().lower()
        if user_answer in valid_answers:
            return user_answer
        print(f"Felaktigt val! Ange ett av f√∂ljande: {', '.join(valid_answers)}.")

def main():
    """Huvudfunktionen som hanterar hela spelet."""
    print("V√§lkommen till Zombiehuset! üßü‚Äç‚ôÇÔ∏è")
    print("Du m√•ste svara r√§tt p√• matematiska fr√•gor och undvika zombied√∂rrar f√∂r att fly.")

    while True:
        num_questions = input_valid_int("V√§lj antal fr√•gor (12-39): ", 12, 39)
        operation = input_valid_str("V√§lj r√§knes√§tt (multiplikation, division, modulo): ", 
                                    ["multiplikation", "division", "modulo"])
        
        if operation == "multiplikation":
            value = input_valid_int("V√§lj en multiplikationstabell (2-12): ", 2, 12)
        else:
            value = input_valid_int("V√§lj en divisor (2-5): ", 2, 5)

        used_questions = {}
        question_limits = (1, 2, 3)  # Max antal g√•nger en fr√•ga f√•r f√∂rekomma

        doors = num_questions  # Startv√§rde f√∂r antal d√∂rrar

        for question_num in range(1, num_questions + 1):
            factor_or_dividend, correct_answer = generate_question(operation, value, used_questions, question_limits)
            print(f"\nFr√•ga {question_num}: Vad √§r {factor_or_dividend} {operation} {value}?")
            user_answer = input_valid_int("Ditt svar: ", 0)

            if user_answer != correct_answer:
                print("Fel svar! Zombiesarna tog dig! Game over! üò±")
                break

            print(f"R√§tt svar! Du har klarat {question_num} av {num_questions} fr√•gor.")

            if question_num < num_questions - 1:  # D√∂rrval g√∂rs tills n√§st sista fr√•gan
                print(f"V√§lj en d√∂rr mellan 1 och {doors}. Zombiesarna g√∂mmer sig bakom en av dem!")
                zombie_door = setup_zombie_door(doors)
                chosen_door = input_valid_int(f"Vilken d√∂rr v√§ljer du (1-{doors})? ", 1, doors)

                if not choose_door(zombie_door, chosen_door):
                    print(f"Oh nej! Zombiesarna tog dig! De g√∂mde sig bakom d√∂rr {zombie_door}. Game over! üò±")
                    break

                doors -= 1  # Minska antal d√∂rrar efter varje runda
            else:
                print("Grattis! Du har klarat alla fr√•gor och √∂verlevt Zombiehuset! üéâ")

        play_again = input_valid_str("Vill du spela igen? (ja/nej): ", ["ja", "nej"])
        if play_again != "ja":
            print("Tack f√∂r att du spelade Zombiehuset! Hejd√•!")
            break

if __name__ == "__main__":
    main()
