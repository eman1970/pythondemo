import random

def generate_question(operation, value, used_questions, max_repeats):
    """Genererar en matematisk fr√•ga och hanterar √•teranv√§ndning av fr√•gor."""
    possible_questions = [(operand, value) for operand in range(13)]
    
    # Filtrera ut fr√•gor som inte √∂verskridit max upprepningar
    available_questions = [q for q in possible_questions if used_questions.get(q, 0) <= max_repeats]

    if not available_questions:
        return None  

    question = random.choice(available_questions)
    operand = question[0]

    answer = {
        "*": operand * value,
        "//": operand // value,
        "%": operand % value
    }.get(operation)

    used_questions[question] = used_questions.get(question, 0) + 1
    return operand, answer

def validate_int(prompt_text, min_value, max_value=None):
    """Ber anv√§ndaren om ett giltigt heltal inom angivet intervall och hanterar felaktig inmatning."""
    while True:
        try:
            user_input = int(input(prompt_text).strip())
            if max_value is None or min_value <= user_input <= max_value:
                return user_input
            print(f"üö´ Fel! Ange ett tal mellan {min_value} och {max_value}.")
        except ValueError:
            print("üö´ Ogiltig inmatning! Ange ett heltal.")

def validate_str(prompt_text, valid_answers):
    """Ber anv√§ndaren ange en str√§ng fr√•n en lista med giltiga alternativ och hanterar felaktig inmatning."""
    while True:
        user_input = input(prompt_text).strip().lower()
        if user_input in valid_answers:
            return user_input
        print(f"üö´ Fel! Ange n√•got av f√∂ljande: {', '.join(valid_answers)}.")

def main():
    """Huvudfunktionen som styr spelet."""
    print("V√§lkommen till Zombie House! üßü‚Äç‚ôÇÔ∏è")
    print("Svara r√§tt p√• mattefr√•gor och undvik zombied√∂rrar f√∂r att fly.")

    # üõ† Anv√§ndaren v√§ljer spelinst√§llningar
    num_questions = validate_int("Antal fr√•gor (12-39): ", 12, 39)
    operation = validate_str("R√§knes√§tt (*, //, %): ", ["*", "//", "%"])

    value = validate_int(
        "Multiplikationstabell (2-12): " if operation == "*" else "Divisor (2-5): ",
        2, 12 if operation == "*" else 5
    )

    while True:
        used_questions = {}
        max_repeats = 0 if num_questions < 14 else 1 if num_questions <= 26 else 2
        doors = num_questions
        won_game = False

        # üîÑ Spelloop: G√•r igenom alla fr√•gor en efter en
        for question_num in range(1, num_questions + 1):
            question_data = generate_question(operation, value, used_questions, max_repeats)
            if question_data is None:
                print("‚ö†Ô∏è Kunde inte skapa fler unika fr√•gor!")
                break

            operand, correct_answer = question_data
            user_answer = validate_int(f"\nüî¢ Fr√•ga {question_num}/{num_questions}: {operand} {operation} {value} = ? ", 0)

            if user_answer != correct_answer:
                print("‚ùå Fel! Zombierna attackerar! üò±")
                break

            print("‚úÖ R√§tt! Du √∂verlevde denna runda.")

            # üö™ D√∂rrvalssekvens med debug-information
            if doors == 2:
                print("üåü Bra val! Nu √•terst√•r **d√∂rrvalet**...")
                
                zombie_door = random.randint(1, doors)
                print(f"\nüö™ [DEBUG] Zombierna g√∂mmer sig bakom d√∂rr {zombie_door}!")

                chosen_door = validate_int(f"V√§lj d√∂rr (1-{doors}): ", 1, doors)

                if chosen_door == zombie_door:
                    print(f"‚ò†Ô∏è Zombierna f√•ngade dig genom d√∂rr {zombie_door}! Spelet √§r √∂ver.")
                    break

                print("‚úÖ Du valde r√§tt d√∂rr! Nu kommer **sista fr√•gan**...")

                # üî¢ Sista matematikfr√•gan efter d√∂rrvalet
                final_question_data = generate_question(operation, value, used_questions, max_repeats)
                if final_question_data is None:
                    print("‚ö†Ô∏è Kunde inte generera sista fr√•ga!")
                    break

                final_operand, final_correct = final_question_data
                final_answer = validate_int(f"\n‚ö° Sista fr√•ga: {final_operand} {operation} {value} = ? ", 0)

                if final_answer == final_correct:
                    print("üéâ GRATTIS! Du √∂verlevde Zombie House!")
                    won_game = True
                else:
                    print("‚ò†Ô∏è Sista fr√•gan blev din underg√•ng!")
                break  # Spelet avslutas efter sista fr√•gan.

            zombie_door = random.randint(1, doors)
            print(f"\nüö™ [DEBUG] Zombierna g√∂mmer sig bakom d√∂rr {zombie_door}!")

            chosen_door = validate_int(f"V√§lj d√∂rr (1-{doors}): ", 1, doors)

            if chosen_door == zombie_door:
                print(f"‚ò†Ô∏è Zombierna f√•ngade dig genom d√∂rr {zombie_door}! Spelet √§r √∂ver.")
                break

            doors -= 1
            print(f"Du har {doors} d√∂rrar kvar att v√§lja mellan.")

        play_again = validate_str("\nSpela igen? (ja/nej): ", ["ja", "nej"])

        if play_again != "ja":
            print("üëã Tack f√∂r att du spelade!")
            break  

        if won_game:
            print("Startar om spelet med **nya inst√§llningar**...")
            num_questions = validate_int("Antal fr√•gor (12-39): ", 12, 39)
            operation = validate_str("R√§knes√§tt (*, //, %): ", ["*", "//", "%"])
            value = validate_int(
                "Multiplikationstabell (2-12): " if operation == "*" else "Divisor (2-5): ",
                2, 12 if operation == "*" else 5
            )
        else:
            print("Startar om spelet med **samma inst√§llningar**...")

if __name__ == "__main__":
    main()
